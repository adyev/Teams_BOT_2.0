from User import User
from bot.bot import Bot
from bot.bot import Event
from bot.handler import MessageHandler
from bot.handler import BotButtonCommandHandler
from schedule import every
from pathos.multiprocessing import ProcessPool
from threading import Thread
from Button import Button
from Logger import Logger
import time
import os
import json
import schedule
import DataFuncs
import config



class Secretary:
    def __init__(self) -> None:
        self.users: list[User] = DataFuncs.get_users()
        self.senders = DataFuncs.get_senders()
        self.bot = Bot(token=os.environ.get("TEAMS_BOT_TOKEN", "localhost:5432"))
        self.bot.dispatcher.add_handler(MessageHandler(callback=self.message_reaction))
        self.bot.dispatcher.add_handler(BotButtonCommandHandler(callback=self.button_reaction))
        self.SAA_CHAT_ID = os.environ.get("TEAMS_SAA_CHAT_ID", "localhost:5432")
        self.RPI_CHAT_ID = os.environ.get("TEAMS_RPI_CHAT_ID", "localhost:5432")
        self.logger = Logger()
        self.buttons = {
            'callback_on':  Button(text='‚úÖ –í–∫–ª—é—á–∏—Ç—å', 
                                           callbackData="callback_on",
                                           callback_func=self.silen—Åed_swich
                                           ), 
            'callback_off': Button(text='üö´ –í—ã–∫–ª—é—á–∏—Ç—å', 
                                           callbackData="callback_off",
                                           callback_func=self.silen—Åed_swich
                                           ),
            'callback_workplace': Button(text='üíª –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã', 
                                           callbackData="callback_workplace",
                                           callback_func=self.send_place_choice
                                           ),
            'callback_office': Button(text='üíº –û—Ñ–∏—Å', 
                                           callbackData="callback_office",
                                           callback_func=self.send_chosen_place
                                           ),
            'callback_home': Button(text='üè° –ò–∑ –¥–æ–º–∞', 
                                           callbackData="callback_home",
                                           callback_func=self.send_chosen_place
                                           ),
            'callback_remind_later': Button(text='üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ', 
                                           callbackData="callback_remind_later",
                                           callback_func=self.send_place_choice
                                           ),
        }
    def send_chosen_place(self):
        print ('send_chosen_place')
        pass

    def remind_later(self, event: Event):
        pass

    def send_place_choice(self, event: Event = None, user: User = None):
        if (user == None):
            user = self.get_user_by_id(event.from_chat)
        
        self.logger.full_log(action='send_place_choice', user=user)        
        self.logger.full_log(action='send_place_choice')
        buttons = [[
            self.buttons['callback_office'].form_dict(),
            self.buttons['callback_home'].form_dict(),
        ],
        [
            self.buttons['callback_remind_later'].form_dict()  
        ]]
        self.bot.send_text(text='–ì–¥–µ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—à—å?', 
                  chat_id=user.chat_id, 
                  inline_keyboard_markup='{}'.format(json.dumps(buttons)))
        pass

    def daily_question(self):
        
        self.send_place_choice(user=self.get_user_by_id('adyevdv@sovcombank.ru'))
        pass


    def button_reaction(self, bot: Bot, event: Event):
        self.logger.full_log(action='button_reaction')
        button = self.buttons[event.data['callbackData']]
        button.callback_func(event)

    def message_reaction(self, bot: Bot, event: Event):
        self.logger.full_log(action='message_reaction')
        commands = ['/start', '/menu', '/help', '/changeCity', '/setWorkTime', '/gimmeChatId', '/getMe']
        #print (event)
        
        user = self.get_user_by_id(chat_id=event.data['from']['userId'])
        if(event.text == '/gimmeChatId'):
            print(event.from_chat)
        if (event.chat_type == 'private'):
            if (user == None):
                bot.send_text(text='–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start', chat_id=event.from_chat)
            elif(event.text in commands):
                self.logger.full_log(action= f'–ö–æ–º–∞–Ω–¥–∞ {event.text}, –ª–∏—á–Ω—ã–π —á–∞—Ç', user=user)
                if (event.text == '/menu'):
                    self.send_menu(user=user)
                elif(event.text == '/getMe'):
                    bot.send_text(text=f'{str(user)}', chat_id=event.from_chat)
                elif(event.text == '/start'):
                    self.register(event=event)
                elif(event.text == '/changeCity'):
                    self.changeCity(user=user)
                elif(event.text == '/setWorkTime'):
                    self.setWorkTime(user=user)
                elif(event.text == '/help'):
                    bot.send_text(text='–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'\
                                  '/menu - –≤—ã–∑–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é. '\
                                  '–í –Ω–µ–º –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≥—Ä–∞—Ñ–∏–∫—É, '\
                                  '–∏–ª–∏ –≤—Ä—É—á–Ω—É—é –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã.\n'\
                                  '/changeCity - –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞. '\
                                  '–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ 9:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.\n'\
                                  '/setWorkTime - –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã. '\
                                  '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.', chat_id=event.from_chat)
    
            else:
                bot.send_text(text='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è  –∫–æ–º–∞–Ω–¥–∞. –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /help', chat_id=event.from_chat)
    

            
        else:
            if (event.text in commands):
                self.logger.full_log(action= f'–ö–æ–º–∞–Ω–¥–∞ {event.text}, –ø—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç', user=user)
                bot.send_text(text='<b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –≤–Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!</b>', chat_id=event.from_chat, parse_mode='HTML')


    def setWorkTime(self, user: User):
        pass

    def changeCity(self, user: User):
        pass

    def register(self, event: Event):
        pass

    def send_menu(self, user: User):
        self.bot.send_text(text='hi', chat_id=user.chat_id)
        buttons = [[self.buttons['callback_workplace'].form_dict()]]
        if (user.silen—Åed):
            buttons[0].append(self.buttons['callback_on'].form_dict())
        else:
            buttons[0].append(self.buttons['callback_off'].form_dict())
        #print (buttons)
        self.bot.send_text(text='–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', 
                  chat_id=user.chat_id, 
                  inline_keyboard_markup='{}'.format(json.dumps(buttons)))
        pass

        
    def silen—Åed_swich(self, event: Event):
        user = self.get_user_by_id(event.from_chat)
        self.logger.full_log(action='silensed_switch')
        self.logger.full_log(action='–ü–µ—Ä–µ–∫–ª—é—á–∏–ª silenced', user=user)
        user.silen—Åed = False if user.silen—Åed == True else True
        DataFuncs.update_add_user(user)
        new_buttons = [[
            self.buttons['callback_workplace'].form_dict()
        ]]
        if (user.silen—Åed):
            self.bot.send_text(text='–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞', chat_id=user.chat_id)
            new_buttons[0].append(self.buttons['callback_on'].form_dict())
        else:
            self.bot.send_text(text='–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞', chat_id=user.chat_id)
            new_buttons[0].append(self.buttons['callback_off'].form_dict())
        self.bot.edit_text(inline_keyboard_markup=new_buttons, msg_id=event.data['message']['msgId'], chat_id=event.from_chat, text='–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?')
    def get_user_by_id(self, chat_id):
        for user in self.users:
            if user.chat_id == chat_id:
                return user
        return None
        

    def start_schedule(self):
        self.logger.full_log(action='start_schedule')
        #every().hour.at(":00").do(daily_question)
        #every().day.at("21:24").do(self.send_place_choice)
        every().minute.do(self.daily_question)
        #every().day.at("13:00").do(send_report)
        while (True):
            schedule.run_pending()
            time.sleep(1)

    def start(self):
        thread = Thread(target=self.start_schedule)
        thread.start()
        self.bot.start_polling()
        self.bot.idle()
        pass

    def create_test_users(self):
        self.users.extend([
            User(name='–ê–¥—ã–µ–≤1', chat_id='@1'),
            User(name='–ê–¥—ã–µ–≤2', chat_id='@1')
        ])
        pass

    